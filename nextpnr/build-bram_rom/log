
 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+3710 (git sha1 2116c585, clang 12.0.0 -fPIC -Os)


-- Parsing `bram_rom.v' using frontend `verilog' --

1. Executing Verilog-2005 frontend: bram_rom.v
Parsing Verilog input from `bram_rom.v' to AST representation.
Generating RTLIL representation for module `\top'.
Successfully finished Verilog frontend.

-- Running command `tcl synth/synth_generic.tcl 4 build-bram_rom/bram_rom.json build-bram_rom/bram_rom-pre.v' --

2. Executing Verilog-2005 frontend: /Users/swhite/Projects/rodinia/nextpnr/synth/prims.v
Parsing Verilog input from `/Users/swhite/Projects/rodinia/nextpnr/synth/prims.v' to AST representation.
Generating RTLIL representation for module `\LUT'.
Generating RTLIL representation for module `\DFF'.
Generating RTLIL representation for module `\GENERIC_SLICE'.
Generating RTLIL representation for module `\GENERIC_IOB'.
Generating RTLIL representation for module `\GENERIC_BRAM'.
Successfully finished Verilog frontend.

3. Executing HIERARCHY pass (managing design hierarchy).

3.1. Finding top of design hierarchy..
root of   1 design levels: top                 
Automatically selected top as design top module.

3.2. Analyzing design hierarchy..
Top module:  \top

3.3. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.
Warning: Resizing cell port top.ram_inst.DataOutA from 8 bits to 18 bits.

4. Executing PROC pass (convert processes to netlists).

4.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

4.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

4.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 1 assignment to connection.

4.4. Executing PROC_INIT pass (extract init attributes).

4.5. Executing PROC_ARST pass (detect async resets in processes).

4.6. Executing PROC_MUX pass (convert decision trees to multiplexers).
Creating decoders for process `\top.$proc$bram_rom.v:26$1'.

4.7. Executing PROC_DLATCH pass (convert process syncs to latches).

4.8. Executing PROC_DFF pass (convert process syncs to FFs).
Creating register for signal `\top.\ctr' using process `\top.$proc$bram_rom.v:26$1'.
  created $dff cell `$procdff$4' with positive edge clock.

4.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Removing empty process `top.$proc$bram_rom.v:26$1'.
Cleaned up 0 empty switches.

5. Executing FLATTEN pass (flatten design).

6. Executing TRIBUF pass.

7. Executing DEMINOUT pass (demote inout ports to input or output).

8. Executing SYNTH pass.

8.1. Executing PROC pass (convert processes to netlists).

8.1.1. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

8.1.2. Executing PROC_RMDEAD pass (remove dead branches from decision trees).
Removed a total of 0 dead cases.

8.1.3. Executing PROC_PRUNE pass (remove redundant assignments in processes).
Removed 0 redundant assignments.
Promoted 0 assignments to connections.

8.1.4. Executing PROC_INIT pass (extract init attributes).

8.1.5. Executing PROC_ARST pass (detect async resets in processes).

8.1.6. Executing PROC_MUX pass (convert decision trees to multiplexers).

8.1.7. Executing PROC_DLATCH pass (convert process syncs to latches).

8.1.8. Executing PROC_DFF pass (convert process syncs to FFs).

8.1.9. Executing PROC_CLEAN pass (remove empty switches from decision trees).
Cleaned up 0 empty switches.

8.2. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

8.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 0 unused cells and 1 unused wires.
<suppressed ~1 debug messages>

8.4. Executing CHECK pass (checking for obvious problems).
Checking module top...
Found and reported 0 problems.

8.5. Executing OPT pass (performing simple optimizations).

8.5.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

8.5.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

8.5.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

8.5.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

8.5.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

8.5.6. Executing OPT_DFF pass (perform DFF optimizations).

8.5.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

8.5.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

8.5.9. Finished OPT passes. (There is nothing left to do.)

8.6. Executing FSM pass (extract and optimize FSM).

8.6.1. Executing FSM_DETECT pass (finding FSMs in design).

8.6.2. Executing FSM_EXTRACT pass (extracting FSM from design).

8.6.3. Executing FSM_OPT pass (simple optimizations of FSMs).

8.6.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

8.6.5. Executing FSM_OPT pass (simple optimizations of FSMs).

8.6.6. Executing FSM_RECODE pass (re-assigning FSM state encoding).

8.6.7. Executing FSM_INFO pass (dumping all available information on FSM cells).

8.6.8. Executing FSM_MAP pass (mapping FSMs to basic logic).

8.7. Executing OPT pass (performing simple optimizations).

8.7.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

8.7.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

8.7.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

8.7.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

8.7.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

8.7.6. Executing OPT_DFF pass (perform DFF optimizations).

8.7.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

8.7.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

8.7.9. Finished OPT passes. (There is nothing left to do.)

8.8. Executing WREDUCE pass (reducing word size of cells).

8.9. Executing PEEPOPT pass (run peephole optimizers).

8.10. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

8.11. Executing ALUMACC pass (create $alu and $macc cells).
Extracting $alu and $macc cells in module top:
  creating $macc model for $add$bram_rom.v:27$2 ($add).
  creating $alu model for $macc $add$bram_rom.v:27$2.
  creating $alu cell for $add$bram_rom.v:27$2: $auto$alumacc.cc:485:replace_alu$5
  created 1 $alu and 0 $macc cells.

8.12. Executing SHARE pass (SAT-based resource sharing).

8.13. Executing OPT pass (performing simple optimizations).

8.13.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

8.13.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

8.13.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

8.13.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

8.13.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

8.13.6. Executing OPT_DFF pass (perform DFF optimizations).

8.13.7. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

8.13.8. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

8.13.9. Finished OPT passes. (There is nothing left to do.)

8.14. Executing MEMORY pass.

8.14.1. Executing OPT_MEM pass (optimize memories).
Performed a total of 0 transformations.

8.14.2. Executing MEMORY_DFF pass (merging $dff cells to $memrd and $memwr).

8.14.3. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

8.14.4. Executing MEMORY_SHARE pass (consolidating $memrd/$memwr cells).

8.14.5. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

8.14.6. Executing MEMORY_COLLECT pass (generating $mem cells).

8.15. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

9. Executing MEMORY_MAP pass (converting memories to logic and flip-flops).

10. Executing OPT pass (performing simple optimizations).

10.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

10.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

10.3. Executing OPT_MUXTREE pass (detect dead branches in mux trees).
Running muxtree optimizer on module \top..
  Creating internal representation of mux trees.
  No muxes found in this module.
Removed 0 multiplexer ports.

10.4. Executing OPT_REDUCE pass (consolidate $*mux and $reduce_* inputs).
  Optimizing cells in module \top.
Performed a total of 0 changes.

10.5. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
Removed a total of 0 cells.

10.6. Executing OPT_SHARE pass.

10.7. Executing OPT_DFF pass (perform DFF optimizations).

10.8. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..

10.9. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.

10.10. Finished OPT passes. (There is nothing left to do.)

11. Executing TECHMAP pass (map to technology primitives).

11.1. Executing Verilog-2005 frontend: /usr/local/bin/../share/yosys/techmap.v
Parsing Verilog input from `/usr/local/bin/../share/yosys/techmap.v' to AST representation.
Generating RTLIL representation for module `\_90_simplemap_bool_ops'.
Generating RTLIL representation for module `\_90_simplemap_reduce_ops'.
Generating RTLIL representation for module `\_90_simplemap_logic_ops'.
Generating RTLIL representation for module `\_90_simplemap_compare_ops'.
Generating RTLIL representation for module `\_90_simplemap_various'.
Generating RTLIL representation for module `\_90_simplemap_registers'.
Generating RTLIL representation for module `\_90_shift_ops_shr_shl_sshl_sshr'.
Generating RTLIL representation for module `\_90_shift_shiftx'.
Generating RTLIL representation for module `\_90_fa'.
Generating RTLIL representation for module `\_90_lcu'.
Generating RTLIL representation for module `\_90_alu'.
Generating RTLIL representation for module `\_90_macc'.
Generating RTLIL representation for module `\_90_alumacc'.
Generating RTLIL representation for module `\$__div_mod_u'.
Generating RTLIL representation for module `\$__div_mod_trunc'.
Generating RTLIL representation for module `\_90_div'.
Generating RTLIL representation for module `\_90_mod'.
Generating RTLIL representation for module `\$__div_mod_floor'.
Generating RTLIL representation for module `\_90_divfloor'.
Generating RTLIL representation for module `\_90_modfloor'.
Generating RTLIL representation for module `\_90_pow'.
Generating RTLIL representation for module `\_90_pmux'.
Generating RTLIL representation for module `\_90_lut'.
Successfully finished Verilog frontend.

11.2. Continuing TECHMAP pass.
Using template $paramod\_90_alu\A_SIGNED=0\B_SIGNED=0\A_WIDTH=1\B_WIDTH=26\Y_WIDTH=26 for cells of type $alu.
Using extmapper simplemap for cells of type $dff.
Using extmapper simplemap for cells of type $xor.
Using extmapper simplemap for cells of type $and.
Using template $paramod\_90_lcu\WIDTH=26 for cells of type $lcu.
Using extmapper simplemap for cells of type $pos.
Using extmapper simplemap for cells of type $mux.
Using extmapper simplemap for cells of type $not.
Using extmapper simplemap for cells of type $or.
No more expansions possible.
<suppressed ~322 debug messages>

12. Executing OPT pass (performing simple optimizations).

12.1. Executing OPT_EXPR pass (perform const folding).
Optimizing module top.
<suppressed ~145 debug messages>

12.2. Executing OPT_MERGE pass (detect identical cells).
Finding identical cells in module `\top'.
<suppressed ~3 debug messages>
Removed a total of 1 cells.

12.3. Executing OPT_DFF pass (perform DFF optimizations).

12.4. Executing OPT_CLEAN pass (remove unused cells and wires).
Finding unused cells or wires in module \top..
Removed 30 unused cells and 91 unused wires.
<suppressed ~31 debug messages>

12.5. Finished fast OPT passes.

13. Executing ABC pass (technology mapping using ABC).

13.1. Extracting gate netlist of module `\top' to `<abc-temp-dir>/input.blif'..
Extracted 66 gates and 91 wires to a netlist network with 25 inputs and 25 outputs.

13.1.1. Executing ABC.
Running ABC command: <yosys-exe-dir>/yosys-abc -s -f <abc-temp-dir>/abc.script 2>&1
ABC: ABC command line: "source <abc-temp-dir>/abc.script".
ABC: 
ABC: + read_blif <abc-temp-dir>/input.blif 
ABC: + read_lut <abc-temp-dir>/lutdefs.txt 
ABC: + strash 
ABC: + ifraig 
ABC: + scorr 
ABC: Warning: The network is combinational (run "fraig" or "fraig_sweep").
ABC: + dc2 
ABC: + dretime 
ABC: + strash 
ABC: + dch -f 
ABC: + if 
ABC: + mfs2 
ABC: + lutpack -S 1 
ABC: + dress 
ABC: Total number of equiv classes                =      33.
ABC: Participating nodes from both networks       =      64.
ABC: Participating nodes from the first network   =      32. (  96.97 % of nodes)
ABC: Participating nodes from the second network  =      32. (  96.97 % of nodes)
ABC: Node pairs (any polarity)                    =      32. (  96.97 % of names can be moved)
ABC: Node pairs (same polarity)                   =      32. (  96.97 % of names can be moved)
ABC: Total runtime =     0.00 sec
ABC: + write_blif <abc-temp-dir>/output.blif 

13.1.2. Re-integrating ABC results.
ABC RESULTS:              $lut cells:       32
ABC RESULTS:        internal signals:       41
ABC RESULTS:           input signals:       25
ABC RESULTS:          output signals:       25
Removing temp directory.
Removed 0 unused cells and 69 unused wires.

14. Executing TECHMAP pass (map to technology primitives).

14.1. Executing Verilog-2005 frontend: /Users/swhite/Projects/rodinia/nextpnr/synth/cells_map.v
Parsing Verilog input from `/Users/swhite/Projects/rodinia/nextpnr/synth/cells_map.v' to AST representation.
Generating RTLIL representation for module `\$lut'.
Generating RTLIL representation for module `\$_DFF_P_'.
Successfully finished Verilog frontend.

14.2. Continuing TECHMAP pass.
Using template $paramod\$lut\WIDTH=1\LUT=2'01 for cells of type $lut.
Using template \$_DFF_P_ for cells of type $_DFF_P_.
Using template $paramod\$lut\WIDTH=2\LUT=4'0110 for cells of type $lut.
Using template $paramod\$lut\WIDTH=3\LUT=8'01111000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'0111111110000000 for cells of type $lut.
Using template $paramod\$lut\WIDTH=4\LUT=16'1000000000000000 for cells of type $lut.
No more expansions possible.
<suppressed ~126 debug messages>
Removed 0 unused cells and 139 unused wires.

15. Executing HIERARCHY pass (managing design hierarchy).

15.1. Analyzing design hierarchy..
Top module:  \top

15.2. Analyzing design hierarchy..
Top module:  \top
Removed 0 unused modules.

16. Printing statistics.

=== top ===

   Number of wires:                 13
   Number of wire bits:            104
   Number of public wires:           3
   Number of public wire bits:      35
   Number of memories:               0
   Number of memory bits:            0
   Number of processes:              0
   Number of cells:                 67
     DFF                            25
     GENERIC_BRAM                    1
     GENERIC_IOB                     9
     LUT                            32

17. Executing JSON backend.

18. Executing Verilog backend.
Dumping module `\top'.

Warnings: 1 unique messages, 1 total
End of script. Logfile hash: af9553667d, CPU: user 0.15s system 0.01s
Yosys 0.9+3710 (git sha1 2116c585, clang 12.0.0 -fPIC -Os)
Time spent: 49% 1x abc (0 sec), 12% 2x techmap (0 sec), ...
Creating Basic Elements
Creating wires and PIPs
createPIP: Wire already exists UFMTILE(08,01):alta_ufm_gddd00 IOTILE(04,01):GclkDMUX00
createPIP: Wire already exists UFMTILE(08,01):alta_ufm_gddd00 IOTILE(05,01):GclkDMUX00
createPIP: Wire already exists UFMTILE(08,01):alta_ufm_gddd00 IOTILE(06,01):GclkDMUX00
createPIP: Wire already exists UFMTILE(08,01):alta_ufm_gddd00 IOTILE(07,01):GclkDMUX00
createPIP: Wire already exists UFMTILE(08,01):alta_ufm_gddd00 IOTILE(04,09):GclkDMUX00
createPIP: Wire already exists UFMTILE(08,01):alta_ufm_gddd00 IOTILE(05,09):GclkDMUX00
createPIP: Wire already exists UFMTILE(08,01):alta_ufm_gddd00 IOTILE(06,09):GclkDMUX00
createPIP: Wire already exists UFMTILE(08,01):alta_ufm_gddd00 IOTILE(07,09):GclkDMUX00

 /----------------------------------------------------------------------------\
 |                                                                            |
 |  yosys -- Yosys Open SYnthesis Suite                                       |
 |                                                                            |
 |  Copyright (C) 2012 - 2020  Claire Wolf <claire@symbioticeda.com>          |
 |                                                                            |
 |  Permission to use, copy, modify, and/or distribute this software for any  |
 |  purpose with or without fee is hereby granted, provided that the above    |
 |  copyright notice and this permission notice appear in all copies.         |
 |                                                                            |
 |  THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES  |
 |  WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF          |
 |  MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR   |
 |  ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES    |
 |  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN     |
 |  ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF   |
 |  OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.            |
 |                                                                            |
 \----------------------------------------------------------------------------/

 Yosys 0.9+3710 (git sha1 2116c585, clang 12.0.0 -fPIC -Os)


-- Running command `read_verilog -lib synth/prims.v; read_json build-bram_rom/pnrbram_rom.json; dump -o build-bram_rom/bram_rom.il; show -format png -prefix bram_rom; write_verilog build-bram_rom/bram_rom-post.v' --

1. Executing Verilog-2005 frontend: synth/prims.v
Parsing Verilog input from `synth/prims.v' to AST representation.
Generating RTLIL representation for module `\LUT'.
Generating RTLIL representation for module `\DFF'.
Generating RTLIL representation for module `\GENERIC_SLICE'.
Generating RTLIL representation for module `\GENERIC_IOB'.
Generating RTLIL representation for module `\GENERIC_BRAM'.
Successfully finished Verilog frontend.

2. Executing JSON frontend.
Importing module top from JSON tree.

3. Generating Graphviz representation of design.
Writing dot description to `bram_rom.dot'.
Dumping module top to page 1.
Exec: dot -Tpng 'bram_rom.dot' > 'bram_rom.png.new' && mv 'bram_rom.png.new' 'bram_rom.png'

4. Executing Verilog backend.
Dumping module `\top'.

End of script. Logfile hash: cde5830ee7, CPU: user 0.04s system 0.01s
Yosys 0.9+3710 (git sha1 2116c585, clang 12.0.0 -fPIC -Os)
Time spent: 99% 1x show (3 sec), 0% 2x write_verilog (0 sec), ...
